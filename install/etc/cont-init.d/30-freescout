#!/command/with-contenv bash

source /assets/functions/00-container
prepare_service
PROCESS_NAME="freescout"

check_service_initialized init 20-php-fpm

### Check if New Install
if [ ! -f "${NGINX_WEBROOT}/server.php" ]; then
    print_warn "Potential New Installation / Standalone Installation Detected - Copying Freescout Sourcecode"
    cp -R /assets/install/* "${NGINX_WEBROOT}"

    ### If running with /www/html or NGINX_WEBROOT mapped, then create persistent storage
    ### Storage redirection
    if [ -d "/data" ]; then
        print_warn "Detected /data directory. Persistently saving settings/sessions/cache/uploads/modules"
        if [ ! -d "/data/storage" ]; then
            cp -R "${NGINX_WEBROOT}"/storage /data
        fi
        if [ ! -d "/data/Modules" ]; then
            cp -R "${NGINX_WEBROOT}"/Modules /data
        fi
        rm -rf "${NGINX_WEBROOT}"/storage
        ln -s /data/storage "${NGINX_WEBROOT}"/storage
        if [ -d "/data/storage/app/public/attachment" ]; then
            print_notice "Handling Migration to Freescout 1.5.0 private application attachments"
            mkdir -p /data/storage/app/attachment
            mv /data/storage/app/public/attachment/* /data/storage/app/attachment
            rm -rf /data/storage/app/public/attachment
        fi
        rm -rf "${NGINX_WEBROOT}"/Modules
        ln -s /data/Modules "${NGINX_WEBROOT}"/Modules
        ln -sf /data/config "${NGINX_WEBROOT}"/.env
        touch /data/config
        chown "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/.env
        ln -sf /data/.freescout-version "${NGINX_WEBROOT}"/.freescout-version
        chown -R "${NGINX_USER}":"${NGINX_GROUP}" /data
    fi

    ### Auto Upgrade functionality
    if [ ! -f "${NGINX_WEBROOT}/.freescout-version" ]; then
        echo "${FREESCOUT_VERSION} first installed on $(date)" >> "${NGINX_WEBROOT}"/.freescout-version
    fi
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
else
    if [ "$ENABLE_AUTO_UPDATE" = "TRUE" ]; then
        if [ "$FREESCOUT_VERSION" != $(head -n 1 "${NGINX_WEBROOT}"/.freescout-version | awk '{print $1'}) ]; then
            print_warn "Detected in place Freescout version $(head -n 1 "${NGINX_WEBROOT}"/.freescout-version | awk "{print $1"}) - Upgrading to ${FREESCOUT_VERSION}"
            cp -R /assets/install/* "${NGINX_WEBROOT}"
            chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
            cd "${NGINX_WEBROOT}"|| exit
            silent sudo -u "${NGINX_USER}" php artisan freescout:after-app-update
            # 1.7.16 -> 1.7.17
            if ! grep -Fxrq "SESSION_SECURE_COOKIE=.*" "${NGINX_WEBROOT}"/.env ; then
                echo "SESSION_SECURE_COOKIE=false" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
            fi
            UPGRADE=TRUE
            sed -i --follow-symlinks "1 i\
            ${FREESCOUT_VERSION} upgraded on $(date)" /www/html/.freescout-version
        fi
    fi
fi

### Logfile redirection
mkdir -p /www/logs/freescout
chown -R "${NGINX_USER}":"${NGINX_GROUP}" /www/logs/freescout
rm -rf "${NGINX_WEBROOT}"/storage/logs
ln -sf /www/logs/freescout "${NGINX_WEBROOT}"/storage/logs

## Copy over any custom modules overtop of existing
if [ -d "/assets/modules" ]; then
    print_warn "Detected Custom Modules - Adding to application"
    cp -R /assets/modules/* "${NGINX_WEBROOT}"/Modules/
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/Modules/
fi

custom_files "${CONTAINER_CUSTOM_PATH}" "${NGINX_WEBROOT}" "${NGINX_USER}" "${NGINX_GROUP}"
custom_scripts

### Change Application Name
sed -i "s#'name' => '.*',#'name' => '${APPLICATION_NAME}',#g" "${NGINX_WEBROOT}"/config/app.php

### Dynamically Create Configuration
transform_file_var \
                DB_HOST \
                DB_NAME \
                DB_PASS \
                DB_PORT \
                DB_USER

if grep -q "APP_URL" "${NGINX_WEBROOT}"/.env > /dev/null 2>&1; then
    if [ "${SETUP_TYPE,,}" = "auto" ]; then
        sanity_db
        sanity_var SITE_URL "Site URL"
        db_ready "${DB_TYPE}"

        print_info "Auto Configuring based on Environment Variables"
        # Proxy and Host Settings
        if [ -z "${SITE_URL}" ]; then
            if [ -n "${APP_URL}" ]; then
                sed -i --follow-symlinks "s#APP_URL=.*#APP_URL=${APP_URL}#g" "${NGINX_WEBROOT}"/.env
            fi
        else
            sed -i --follow-symlinks "s#APP_URL=.*#APP_URL=${SITE_URL}#g" "${NGINX_WEBROOT}"/.env
        fi

        case $(echo ${SITE_URL,,} | cut -d : -f1) in
            http )
                sed -i --follow-symlinks "s#SESSION_SECURE_COOKIE=.*#SESSION_SECURE_COOKIE=false#g" "${NGINX_WEBROOT}"/.env
                ;;
            https )
                sed -i --follow-symlinks "s#SESSION_SECURE_COOKIE=.*#SESSION_SECURE_COOKIE=true#g" "${NGINX_WEBROOT}"/.env
                ;;
        esac

        if var_true "${APP_DEBUG}" || var_true "${DISPLAY_ERRORS}" ; then
            sed -i --follow-symlinks "s#APP_DEBUG=.*#APP_DEBUG=true#g" "${NGINX_WEBROOT}"/.env
        else
            sed -i --follow-symlinks "s#APP_DEBUG=.*#APP_DEBUG=false#g" "${NGINX_WEBROOT}"/.env
        fi

        if [ "$DB_TYPE,,}" = "pgsql" ] ; then
            if ! grep -Fxrq "DB_PGSQL_SSL_MODE=" "${NGINX_WEBROOT}"/.env ; then
                sed -i --follow-symlinks "/DB_TYPE=pgsql/a DB_PGSQL_SSL_MODE=${DB_PGSQL_SSL_MODE}" "${NGINX_WEBROOT}"/.env
            else
                sed -i --follow-symlinks "s#DB_PGSQL_SSL_MODE=.*#DB_PGSQL_SSL_MODE=${DB_PGSQL_SSL_MODE}#g" "${NGINX_WEBROOT}"/.env
            fi
        fi
        sed -i --follow-symlinks "s#DB_HOST=.*#DB_HOST=${DB_HOST}#g" "${NGINX_WEBROOT}"/.env
        sed -i --follow-symlinks "s#DB_PORT=.*#DB_PORT=${DB_PORT}#g" "${NGINX_WEBROOT}"/.env
        sed -i --follow-symlinks "s#DB_DATABASE=.*#DB_DATABASE=${DB_NAME}#g" "${NGINX_WEBROOT}"/.env
        sed -i --follow-symlinks "s#DB_USERNAME=.*#DB_USERNAME=${DB_USER}#g" "${NGINX_WEBROOT}"/.env
        sed -i --follow-symlinks "s#DB_PASSWORD=.*#DB_PASSWORD=${DB_PASS}#g" "${NGINX_WEBROOT}"/.env

        # Private Attachment support (Freescout 1.5.0)
        if grep -q "APP_DOWNLOAD_ATTACHMENTS_VIA" "${NGINX_WEBROOT}"/.env > /dev/null 2>&1; then
            sed -i --follow-symlinks "/APP_DOWNLOAD_ATTACHMENTS_VIA=nginx/d" "${NGINX_WEBROOT}"/.env
        fi

        # Disable App Updating
        if ! grep -q "APP_DISABLE_UPDATING" "${NGINX_WEBROOT}"/.env > /dev/null 2>&1; then
            echo "APP_DISABLE_UPDATING=true" | sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
        fi

        # App Proxy (1.8.25)
        if ! grep -q "APP_PROXY" "${NGINX_WEBROOT}"/.env > /dev/null 2>&1; then
            echo "APP_PROXY=${APP_PROXY}" | sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
        else
            sed -i --follow-symlinks "s#APP_PROXY=.*#APP_PROXY=${APP_PROXY}#g" "${NGINX_WEBROOT}"/.env
        fi

        # Implement new_fetching_library config option
        if ! grep -q "APP_NEW_FETCHING_LIBRARY" "${NGINX_WEBROOT}"/.env > /dev/null 2>&1; then
            echo "APP_NEW_FETCHING_LIBRARY=${APP_NEW_FETCHING_LIBRARY,,}" | sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
        else
            sed -i --follow-symlinks "s#APP_NEW_FETCHING_LIBRARY=.*#APP_NEW_FETCHING_LIBRARY=${APP_NEW_FETCHING_LIBRARY,,}#g" "${NGINX_WEBROOT}"/.env
        fi

        if ! grep -q "APP_X_FRAME_OPTIONS" "${NGINX_WEBROOT}"/.env > /dev/null 2>&1; then
            echo "APP_X_FRAME_OPTIONS=${APP_X_FRAME_OPTIONS,,}" | sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
        else
            sed -i --follow-symlinks "s#APP_X_FRAME_OPTIONS=.*#APP_X_FRAME_OPTIONS=${APP_X_FRAME_OPTIONS,,}#g" "${NGINX_WEBROOT}"/.env
        fi
    else
        print_info "Skipping Auto configuration and using in place .env"
    fi
    if [ -f /data/config ]; then
        chown "${NGINX_USER}":"${NGINX_GROUP}" /data/config
        chmod 0755 /data/config
    fi
else
    ### Sanity Test
    sanity_db
    sanity_var SITE_URL "Site URL"
    db_ready "${DB_TYPE}"

    print_info "Generating Configuration"
    touch "${NGINX_WEBROOT}"/.env
    chown "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/.env
    echo "#### Automatically Generated File - Upon container restart any settings will reset!" | silent sudo -u "${NGINX_USER}" tee "${NGINX_WEBROOT}"/.env
    # Proxy and HostSettings
    if [ -z "${SITE_URL}" ]; then
        if [ -n "${APP_URL}" ]; then
            echo "APP_URL=$APP_URL" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
        fi
    else
        echo "APP_URL=$SITE_URL" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    fi

    case $(echo ${SITE_URL,,} | cut -d : -f1) in
        http )
            echo "SESSION_SECURE_COOKIE=false" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
            ;;
        https )
            echo "SESSION_SECURE_COOKIE=true" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
            ;;
    esac

    if [ -n "${APP_PROXY}" ] ; then
        echo "APP_PROXY=${APP_PROXY}" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    fi

    if [ -n "${APP_TRUSTED_PROXIES}" ] ; then
        echo "APP_TRUSTED_PROXIES=${APP_TRUSTED_PROXIES}" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    fi

    if var_true "${APP_DEBUG}" || var_true "${DISPLAY_ERRORS}" ; then
        echo "APP_DEBUG=true" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    else
        echo "APP_DEBUG=false" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    fi

    echo "APP_KEY=" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env

    # Set DB Settings
    echo "DB_CONNECTION=$DB_TYPE" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "DB_HOST=$DB_HOST" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "DB_PORT=$DB_PORT" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "DB_DATABASE=$DB_NAME" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "DB_USERNAME=$DB_USER" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "DB_PASSWORD=$DB_PASS" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "APP_DISABLE_UPDATING=true" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env

    # Generate Key
    cd "${NGINX_WEBROOT}"/
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/config
    if [ -f /data/config ]; then
        chown "${NGINX_USER}":"${NGINX_GROUP}" /data/config
        chmod 0755 /data/config
    fi
    silent sudo -u "${NGINX_USER}" php artisan key:generate
fi

## Removals
# 1.8.78
sed -i --follow-symlinks "/APP_FORCE_HTTP=/d" "${NGINX_WEBROOT}"/.env

### Cleanup
cd "${NGINX_WEBROOT}"/
silent sudo -u "${NGINX_USER}" php artisan freescout:clear-cache
silent sudo -u "${NGINX_USER}" php artisan config:clear
silent sudo -u "${NGINX_USER}" php artisan storage:link

### Check to see if DB is populated
if [ "${DB_TYPE}" = "mysql" ]; then
  mysql -u $DB_USER -p$DB_PASS -h$DB_HOST -P$DB_PORT -e "use "$DB_NAME"; SELECT * FROM users;" > /dev/null 2>&1
elif [ "${DB_TYPE,,}" = "pgsql" ] || [ "${DB_TYPE,,}" = "postgres" ]; then
  export PGPASSWORD="${DB_PASS}"
  psql --dbname=postgresql://$DB_USER@$DB_HOST:$DB_PORT/$DB_NAME -c "SELECT * FROM users;" > /dev/null 2>&1
fi

if [ $? -gt 0 ]; then
    ### Perform Database Installtion Routines
    print_warn "Detected empty Database - Setting up - Please wait.."
    sleep 5
    silent sudo -u "${NGINX_USER}" php artisan migrate:fresh --force
    silent sudo -u "${NGINX_USER}" php artisan freescout:clear-cache
    transform_file_var \
                    ADMIN_EMAIL \
                    ADMIN_FIRST_NAME \
                    ADMIN_LAST_NAME \
                    ADMIN_PASS
    sanity_var ADMIN_EMAIL "Admin Email Address"
    sanity_var ADMIN_PASS "Admin Password"

    ### Create User
    print_warn "Creating Administrative User"
    cd "${NGINX_WEBROOT}"
    silent sudo -u "${NGINX_USER}" php artisan -n freescout:create-user --role=admin --firstName="${ADMIN_FIRST_NAME}" --lastName="${ADMIN_LAST_NAME}" --email="${ADMIN_EMAIL}" --password="${ADMIN_PASS}"
fi

cd "${NGINX_WEBROOT}"
chown -R "${NGINX_USER}":"${NGINX_GROUP}" storage bootstrap/cache public/css/builds public/js/builds
chmod -R ug+rwx storage bootstrap/cache public/css/builds public/js/builds
chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
chmod ug+rwx "${NGINX_WEBROOT}"

### Install symlinks for modules that may have been previously installed
if [ "$(ls -A /www/html/Modules)" ]; then
    print_warn "Installing Modules into container"
  silent /usr/bin/expect<<EOD
spawn sudo -u "${NGINX_USER}" php artisan freescout:module-install --no-ansi
set timeout 30
expect \
{
  (yes/no) {exp_send yes\r;exp_continue}
  eof {}
#  timeout {puts "Putting you in control - to exit type \\ twice";interact \\\\}
}
EOD
fi

print_warn "Running any Database Migrations"
cd "${NGINX_WEBROOT}"
silent /usr/bin/expect <<EOD
spawn sudo -u "${NGINX_USER}" php artisan migrate --no-ansi
set timeout 30
expect \
{
  (yes/no) {exp_send yes\r;exp_continue}
  eof {}
#  timeout {puts "Putting you in control - to exit type \\ twice";interact \\\\}
}
EOD

if [ ! -f "/tmp/.container/container-restart" ] ; then
    ### Add alias for running artisan
    cat >> /root/.bashrc <<EOF
    function artisan() {
        export oldpwd="\$(pwd)"
        cd ${NGINX_WEBROOT}
        sudo -u ${NGINX_USER} php artisan "\$@"
        cd "\${oldpwd}"
    }
EOF
fi

cd "${NGINX_WEBROOT}"
silent sudo -u "${NGINX_USER}" php artisan config:clear
silent sudo -u "${NGINX_USER}" php artisan freescout:after-app-update

cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}"/freescout-schedule
# Hardcoded in image in /etc/cont-init.d/$(basename "$0")
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

* * * * * sudo -u ${NGINX_USER} TZ=${TIMEZONE} php ${NGINX_WEBROOT}/artisan schedule:run >> /dev/null 2>&1
EOF

print_info "Initialization Complete. Please visit ${SITE_URL} and login with your credentials.."

liftoff
